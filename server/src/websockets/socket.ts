import prisma from "../lib/prisma";
import { io } from "../index";
import redis from "../redis/redis";
import { redisProfileKey, redisGroupKey } from "../redis/redisKey";
import { getFriends } from "../utils/getFriends";
import { getRooms } from "../utils/getGroups";

const socketGroups: Record<string, Set<string>> = {};
const socketUserMap: Record<string, string> = {};

io.on("connection", (socket) => {
Â  console.log("socket connected", socket.id);

Â  socket.on("register", async (userId: string) => {
Â  Â  try {
Â  Â  Â  await redis.hSet("online_users", userId, socket.id);
Â  Â  Â  await prisma.user.update({
Â  Â  Â  Â  where: { id: userId },
Â  Â  Â  Â  data: { lastActive: new Date() },
Â  Â  Â  });
Â  Â  Â  socketUserMap[socket.id] = userId;
Â  Â  Â  console.log(`User ${userId} registered and marked active.`);
Â  Â  } catch (err) {
 console.error("Error in register event:", err);
Â  Â  }
Â  });

Â  socket.on("register-group", async (data:{userId: string, roomId: string}) => {
Â  Â  try {
Â  Â  Â  const {userId,roomId}=data
Â  Â  Â  const key = `group_${roomId}_users`;
Â  Â  Â  const existing = await redis.hGet(key, "members");
Â  Â  Â  let members = existing ? JSON.parse(existing) : [];

Â  Â  Â  if (!members.includes(socket.id)) members.push(socket.id);
Â  Â  Â  await redis.hSet(key, { members: JSON.stringify(members) });

Â  Â  Â  if (!socketGroups[socket.id]) socketGroups[socket.id] = new Set();
Â  Â  Â  socketGroups[socket.id].add(roomId);
Â  Â  Â  socketUserMap[socket.id] = userId;

Â  Â  Â  console.log(`User ${userId} joined group ${roomId}`);
Â  Â  } catch (err) {
Â  Â  Â  console.error("Error in register-group event:", err);
Â  Â  }
Â  });

Â  socket.on(
Â  Â  "private-message",
Â  Â  async (data: { senderId: string; receiverId: string; message: string }) => {
Â  Â  Â  try {
Â  Â  Â  Â  const { senderId, receiverId, message } = data;
Â  Â  Â  Â  console.log("received private message from", senderId);

Â  Â  Â  Â  const receiverSocketId = await redis.hGet("online_users", receiverId);

Â  Â  Â  Â  const chat = await prisma.chat.create({
Â  Â  Â  Â  Â  data: { senderId, receiverId, message },
Â  Â  Â  Â  });

Â  Â  Â  Â  console.log("message saved in db", chat);

Â  Â  Â  Â  if (receiverSocketId) {
Â  Â  Â  Â  Â  io.to(receiverSocketId).emit("receive-private-message", {
Â  Â  Â  Â  Â  Â  senderId,
Â  Â  Â  Â  Â  Â  receiverId,
Â  Â  Â  Â  Â  Â  message,
Â  Â  Â  Â  Â  Â  createdAt: chat.createdAt,
Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  console.log(`sent message to receiver ${receiverId}`);
Â  Â  Â  Â  }

Â  Â  Â  Â  socket.emit("private-message-sent", {
Â  Â  Â  Â  Â  success: true,
Â  Â  Â  Â  Â  receiverOnline: Boolean(receiverSocketId),
Â  Â  Â  Â  });

Â  Â  Â  Â  // Update Redis cache for both sender and receiver
Â  Â  Â  Â  const [sender, receiver] = await Promise.all([
Â  Â  Â  Â  Â  prisma.user.findUnique({ where: { id: senderId } }),
Â  Â  Â  Â  Â  prisma.user.findUnique({ where: { id: receiverId } }),
Â  Â  Â  Â  ]);

Â  Â  Â  Â  const [senderFriends, receiverFriends] = await Promise.all([
Â  Â  Â  Â  Â  getFriends(senderId),
Â  Â  Â  Â  Â  getFriends(receiverId),
Â  Â  Â  Â  ]);

Â  Â  Â  Â  await redis.hSet(redisProfileKey(senderId), {
Â  Â  Â  Â  Â  user: JSON.stringify(sender),
Â  Â  Â  Â  Â  friends: JSON.stringify(senderFriends),
Â  Â  Â  Â  });
Â  Â  Â  Â  await redis.hSet(redisProfileKey(receiverId), {
Â  Â  Â  Â  Â  user: JSON.stringify(receiver),
Â  Â  Â  Â  Â  friends: JSON.stringify(receiverFriends),
Â  Â  Â  Â  });
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Error sending private message:", err);
Â  Â  Â  Â  socket.emit("error", { message: "Failed to send private message" });
Â  Â  Â  }
Â  Â  }
Â  );

Â  // ðŸ’¬ GROUP MESSAGE
Â  socket.on(
Â  Â  "group-message-sent",
Â  Â  async (data: { userId: string; roomId: string; message: string }) => {
Â  Â  Â  try {
Â  Â  Â  Â  const { userId, roomId, message } = data;
Â  Â  Â  Â  console.log(`Group message from ${userId} in room ${roomId}`);

Â  Â  Â  Â  // Save message to DB
Â  Â  Â  Â  const chat = await prisma.chat.create({
Â  Â  Â  Â  Â  data: { senderId: userId, roomId, message },
Â  Â  Â  Â  });

Â  Â  Â  Â  console.log("group message saved in db", chat);
Â  Â  Â  Â  const key = `group_${roomId}_users`;
Â  Â  Â  Â  const members = await redis.hGet(key, "members");
Â  Â  Â  Â  const memberSocketIds = members ? JSON.parse(members) : [];

Â  Â  Â  Â  memberSocketIds.forEach((sockId: string) => {
          if(sockId!==socket.id){
Â  Â  Â  Â  Â  io.to(sockId).emit("group-message-received", {
Â  Â  Â  Â  Â  Â  senderId: userId,
Â  Â  Â  Â  Â  Â  roomId,
Â  Â  Â  Â  Â  Â  message,
Â  Â  Â  Â  Â  Â  createdAt: chat.createdAt,
Â  Â  Â  Â  Â  });}
Â  Â  Â  Â  });

Â  Â  Â  Â  
Â  Â  Â  Â  const roomMembers = await prisma.roomMember.findMany({
Â  Â  Â  Â  Â  where: { roomId },
Â  Â  Â  Â  Â  select: { userId: true },
Â  Â  Â  Â  });

Â  Â  Â  Â  for (const m of roomMembers) {
Â  Â  Â  Â  Â  const key = redisGroupKey(m.userId);
Â  Â  Â  Â  Â  const groups = await getRooms(m.userId);
Â  Â  Â  Â  Â  await redis.set(key,  JSON.stringify(groups) );
Â  Â  Â  Â  Â  await redis.expire(key, 3600);
Â  Â  Â  Â  }
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Error sending group message:", err);
Â  Â  Â  Â  socket.emit("error", { message: "Failed to send group message" });
Â  Â  Â  }
Â  Â  }
Â  );

Â  socket.on("disconnect", async () => {
Â  Â  try {
Â  Â  Â  console.log("user disconnected", socket.id);
Â  Â  Â  const userId = socketUserMap[socket.id];

Â  Â  Â  if (userId) {
Â  Â  Â  Â  await redis.hDel("online_users", userId);
Â  Â  Â  Â  console.log(`User ${userId} removed from online_users`);
Â  Â  Â  }

const groups = socketGroups[socket.id];
if (groups) {
  for (const roomId of groups) {
    const key = `group_${roomId}_users`;
    const members = await redis.hGet(key, "members");
    if (members) {
      const updated = JSON.parse(members).filter(
        (id: string) => id !== socket.id
      );
      await redis.hSet(key, "members", JSON.stringify(updated)); 
    }
    console.log(`Removed ${userId} from group ${roomId}`);
  }
  delete socketGroups[socket.id];
}
Â  Â  Â  delete socketUserMap[socket.id];
Â  Â  } catch (err) {
Â  Â  Â  console.error("Error on disconnect:", err);
Â  Â  }
Â  });
});